//===----------------------------------------------------------------------===//
//
// This source file is part of the swift-libp2p open source project
//
// Copyright (c) 2022-2025 swift-libp2p project authors
// Licensed under MIT
//
// See LICENSE for license information
// See CONTRIBUTORS for the list of swift-libp2p project authors
//
// SPDX-License-Identifier: MIT
//
//===----------------------------------------------------------------------===//

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: IPNSRecord.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct IpnsEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Data = Data()

  var signatureV1: Data = Data()

  var validityType: IpnsEntry.ValidityType {
    get {return _validityType ?? .eol}
    set {_validityType = newValue}
  }
  /// Returns true if `validityType` has been explicitly set.
  var hasValidityType: Bool {return self._validityType != nil}
  /// Clears the value of `validityType`. Subsequent reads from it will return its default value.
  mutating func clearValidityType() {self._validityType = nil}

  var validity: Data {
    get {return _validity ?? Data()}
    set {_validity = newValue}
  }
  /// Returns true if `validity` has been explicitly set.
  var hasValidity: Bool {return self._validity != nil}
  /// Clears the value of `validity`. Subsequent reads from it will return its default value.
  mutating func clearValidity() {self._validity = nil}

  var sequence: UInt64 {
    get {return _sequence ?? 0}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  mutating func clearSequence() {self._sequence = nil}

  var ttl: UInt64 {
    get {return _ttl ?? 0}
    set {_ttl = newValue}
  }
  /// Returns true if `ttl` has been explicitly set.
  var hasTtl: Bool {return self._ttl != nil}
  /// Clears the value of `ttl`. Subsequent reads from it will return its default value.
  mutating func clearTtl() {self._ttl = nil}

  var pubKey: Data {
    get {return _pubKey ?? Data()}
    set {_pubKey = newValue}
  }
  /// Returns true if `pubKey` has been explicitly set.
  var hasPubKey: Bool {return self._pubKey != nil}
  /// Clears the value of `pubKey`. Subsequent reads from it will return its default value.
  mutating func clearPubKey() {self._pubKey = nil}

  var signatureV2: Data {
    get {return _signatureV2 ?? Data()}
    set {_signatureV2 = newValue}
  }
  /// Returns true if `signatureV2` has been explicitly set.
  var hasSignatureV2: Bool {return self._signatureV2 != nil}
  /// Clears the value of `signatureV2`. Subsequent reads from it will return its default value.
  mutating func clearSignatureV2() {self._signatureV2 = nil}

  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ValidityType: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// setting an EOL says "this record is valid until..."
    case eol // = 0
    case UNRECOGNIZED(Int)

    init() {
      self = .eol
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .eol
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .eol: return 0
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _validityType: IpnsEntry.ValidityType? = nil
  fileprivate var _validity: Data? = nil
  fileprivate var _sequence: UInt64? = nil
  fileprivate var _ttl: UInt64? = nil
  fileprivate var _pubKey: Data? = nil
  fileprivate var _signatureV2: Data? = nil
  fileprivate var _data: Data? = nil
}

#if swift(>=4.2)

extension IpnsEntry.ValidityType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [IpnsEntry.ValidityType] = [
    .eol,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension IpnsEntry: @unchecked Sendable {}
extension IpnsEntry.ValidityType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IpnsEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "IpnsEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "signatureV1"),
    3: .same(proto: "validityType"),
    4: .same(proto: "validity"),
    5: .same(proto: "sequence"),
    6: .same(proto: "ttl"),
    7: .same(proto: "pubKey"),
    8: .same(proto: "signatureV2"),
    9: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.value) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signatureV1) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._validityType) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._validity) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self._sequence) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self._ttl) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self._pubKey) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self._signatureV2) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    if !self.signatureV1.isEmpty {
      try visitor.visitSingularBytesField(value: self.signatureV1, fieldNumber: 2)
    }
    try { if let v = self._validityType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._validity {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._sequence {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._ttl {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._pubKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._signatureV2 {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: IpnsEntry, rhs: IpnsEntry) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.signatureV1 != rhs.signatureV1 {return false}
    if lhs._validityType != rhs._validityType {return false}
    if lhs._validity != rhs._validity {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._ttl != rhs._ttl {return false}
    if lhs._pubKey != rhs._pubKey {return false}
    if lhs._signatureV2 != rhs._signatureV2 {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension IpnsEntry.ValidityType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EOL"),
  ]
}
